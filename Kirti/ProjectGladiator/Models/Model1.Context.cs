//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectGladiator.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbProjectEntities : DbContext
    {
        public dbProjectEntities()
            : base("name=dbProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblCart> tblCarts { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblCompare> tblCompares { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblWishlist> tblWishlists { get; set; }
        public virtual DbSet<tblOrder> tblOrders { get; set; }
        public virtual DbSet<tblRetailer> tblRetailers { get; set; }
    
        public virtual int proc_Changepass(string rmail, string rpass)
        {
            var rmailParameter = rmail != null ?
                new ObjectParameter("rmail", rmail) :
                new ObjectParameter("rmail", typeof(string));
    
            var rpassParameter = rpass != null ?
                new ObjectParameter("rpass", rpass) :
                new ObjectParameter("rpass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Changepass", rmailParameter, rpassParameter);
        }
    
        public virtual ObjectResult<proc_DisplayRetailerDetails_Result> proc_DisplayRetailerDetails(string rmail)
        {
            var rmailParameter = rmail != null ?
                new ObjectParameter("rmail", rmail) :
                new ObjectParameter("rmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DisplayRetailerDetails_Result>("proc_DisplayRetailerDetails", rmailParameter);
        }
    
        public virtual ObjectResult<proc_RetailLoginCheck_Result> proc_RetailLoginCheck(string rmail, string pass)
        {
            var rmailParameter = rmail != null ?
                new ObjectParameter("rmail", rmail) :
                new ObjectParameter("rmail", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RetailLoginCheck_Result>("proc_RetailLoginCheck", rmailParameter, passParameter);
        }
    
        public virtual ObjectResult<proc_DisplayProducts_Result> proc_DisplayProducts(string rmail)
        {
            var rmailParameter = rmail != null ?
                new ObjectParameter("rmail", rmail) :
                new ObjectParameter("rmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_DisplayProducts_Result>("proc_DisplayProducts", rmailParameter);
        }
    
        public virtual int proc_UpdateProduct(string rmail, Nullable<double> pprice, Nullable<int> pquantity, string pdescrip)
        {
            var rmailParameter = rmail != null ?
                new ObjectParameter("rmail", rmail) :
                new ObjectParameter("rmail", typeof(string));
    
            var ppriceParameter = pprice.HasValue ?
                new ObjectParameter("pprice", pprice) :
                new ObjectParameter("pprice", typeof(double));
    
            var pquantityParameter = pquantity.HasValue ?
                new ObjectParameter("pquantity", pquantity) :
                new ObjectParameter("pquantity", typeof(int));
    
            var pdescripParameter = pdescrip != null ?
                new ObjectParameter("pdescrip", pdescrip) :
                new ObjectParameter("pdescrip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateProduct", rmailParameter, ppriceParameter, pquantityParameter, pdescripParameter);
        }
    }
}
